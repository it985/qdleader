import{_ as n,c as s,o as a,a as t}from"./app-90N25QkG.js";const p={},e=t(`<h1 id="实现sum函数链式调用计算多数之和" tabindex="-1"><a class="header-anchor" href="#实现sum函数链式调用计算多数之和"><span>实现Sum函数链式调用计算多数之和</span></a></h1><h2 id="原型链的实现方案" tabindex="-1"><a class="header-anchor" href="#原型链的实现方案"><span>原型链的实现方案</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"></span>
<span class="line">	<span class="token keyword">function</span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token parameter">num <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">this</span><span class="token punctuation">.</span>total <span class="token operator">=</span> num</span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"> 	<span class="token class-name">Sum</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">this</span><span class="token punctuation">.</span>total <span class="token operator">+=</span> num</span>
<span class="line">		<span class="token keyword">return</span> <span class="token keyword">this</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	</span>
<span class="line">	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">	res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>total<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="柯里化的实现方案" tabindex="-1"><a class="header-anchor" href="#柯里化的实现方案"><span>柯里化的实现方案</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"></span>
<span class="line">	<span class="token keyword">function</span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">let</span> allArgs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">let</span> <span class="token function-variable function">inner</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			allArgs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>allArgs<span class="token punctuation">,</span><span class="token operator">...</span>args<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token keyword">return</span> inner<span class="token punctuation">;</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">		inner<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token keyword">return</span> allArgs<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span>cur</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">				<span class="token keyword">return</span> prev <span class="token operator">+</span> cur</span>
<span class="line">			<span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">		<span class="token keyword">return</span> inner</span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	</span>
<span class="line">	<span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),l=[e];function c(o,i){return a(),s("div",null,l)}const r=n(p,[["render",c],["__file","实现sum链式调用实现多数之和.html.vue"]]),k=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/js%E7%B1%BB/%E6%89%8B%E5%86%99%E7%B1%BB/%E7%AE%80%E5%8D%95%E7%B1%BB/%E5%AE%9E%E7%8E%B0sum%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%95%B0%E4%B9%8B%E5%92%8C.html","title":"实现Sum函数链式调用计算多数之和","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"原型链的实现方案","slug":"原型链的实现方案","link":"#原型链的实现方案","children":[]},{"level":2,"title":"柯里化的实现方案","slug":"柯里化的实现方案","link":"#柯里化的实现方案","children":[]}],"git":{"updatedTime":1724247277000,"contributors":[{"name":"前端架构师","email":"62106726+qdleader@users.noreply.github.com","commits":1}]},"filePathRelative":"前端面试/js类/手写类/简单类/实现sum链式调用实现多数之和.md"}');export{r as comp,k as data};
