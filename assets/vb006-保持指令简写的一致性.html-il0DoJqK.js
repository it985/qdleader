import{_ as e,c as a,o as s,a as n}from"./app-90N25QkG.js";const t={},i=n(`<h1 id="保持指令简写的一致性" tabindex="-1"><a class="header-anchor" href="#保持指令简写的一致性"><span>保持指令简写的一致性</span></a></h1><p>一种常见的技术是使用指令的简写。例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">	@是v<span class="token operator">-</span>on的简写</span>
<span class="line">	<span class="token operator">:</span> 是 v<span class="token operator">-</span>bind 的简写</span>
<span class="line">	# 是 v<span class="token operator">-</span>slot 的简写</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在你的Vue项目中使用这些缩写是很好的。但是要在整个项目中创建某种约定，总是使用它们或从不使用它们,会使我们的项目更具内聚性和可读性。</p>`,4),r=[i];function l(o,c){return s(),a("div",null,r)}const d=e(t,[["render",l],["__file","vb006-保持指令简写的一致性.html.vue"]]),_=JSON.parse('{"path":"/vue/vue%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/vb006-%E4%BF%9D%E6%8C%81%E6%8C%87%E4%BB%A4%E7%AE%80%E5%86%99%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7.html","title":"保持指令简写的一致性","lang":"zh-CN","frontmatter":{},"headers":[],"git":{"updatedTime":1724247277000,"contributors":[{"name":"前端架构师","email":"62106726+qdleader@users.noreply.github.com","commits":1}]},"filePathRelative":"vue/vue最佳实践/vb006-保持指令简写的一致性.md"}');export{d as comp,_ as data};
