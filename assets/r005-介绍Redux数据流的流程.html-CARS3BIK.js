import{_ as r,c as t,o as c,b as e}from"./app-90N25QkG.js";const s={},o=e("h1",{id:"r005-介绍redux数据流的流程",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#r005-介绍redux数据流的流程"},[e("span",null,"r005-介绍Redux数据流的流程")])],-1),a=e("ol",null,[e("li",null,"当用户触摸界面时，调用store.dispatch(action)捕捉具体的action动作。"),e("li",null,"然后Redux的store自动调用reducer函数，store传递两个参数给reducer函数：当前state和收到的action。其中，reducer函数必须是一个纯函数，该函数会返回一个新的state。"),e("li",null,"根reducer会把多个子reducer的返回结果合并成最终的应用状态，在这一过程中，可以使用Redux提供的combineReducers方法。使用combineReducers方法时，action会传递给每个子的reducer进行处理，在子reducer处理后会将结果返回给根reducer合并成最终的应用状态。"),e("li",null,"store调用store.subscribe(listener)监听state的变化，state一旦发生改变就会触发store的更新，最终view会根据store数据的更新刷新界面。")],-1),d=[o,a];function n(l,u){return c(),t("div",null,d)}const _=r(s,[["render",n],["__file","r005-介绍Redux数据流的流程.html.vue"]]),m=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/react%E7%AF%87/r005-%E4%BB%8B%E7%BB%8DRedux%E6%95%B0%E6%8D%AE%E6%B5%81%E7%9A%84%E6%B5%81%E7%A8%8B.html","title":"r005-介绍Redux数据流的流程","lang":"zh-CN","frontmatter":{},"headers":[],"git":{"updatedTime":1724247277000,"contributors":[{"name":"前端架构师","email":"62106726+qdleader@users.noreply.github.com","commits":1}]},"filePathRelative":"前端面试/react篇/r005-介绍Redux数据流的流程.md"}');export{_ as comp,m as data};
