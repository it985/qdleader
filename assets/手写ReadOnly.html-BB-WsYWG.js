import{_ as n,c as s,o as a,a as e}from"./app-90N25QkG.js";const p={},t=e(`<h1 id="手写readonly" tabindex="-1"><a class="header-anchor" href="#手写readonly"><span>手写ReadOnly</span></a></h1><p>Readonly 是 TypeScript 内置的一个类型操作符，它用于将某个类型中每个属性设置为只读属性，这表示这些属性的值不能被修改。 下面是 Readonly 的代码：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Readonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个定义使用了 TypeScript 中的映射类型（Mapped Types）和索引访问类型（Index Access Types）。 首先，声明一个泛型类型 T 作为待操作的类型。然后，使用了映射类型语法，声明一个新类型，其属性名为 P，该属性名必须是 T 的属性名之一，属性值为该属性名在 T 类型中对应的类型。并且使用 readonly 关键字将属性设置为只读属性。 该类型操作符的作用是保护类型中的属性免于被错误的修改，特别是防止在多个地方引用该类型中的同一个属性时产生冲突。 以下是一个使用 Readonly 操作符的示例：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">ReadonlyPerson</span> <span class="token operator">=</span> Readonly<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> person<span class="token operator">:</span> ReadonlyPerson <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Bob&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 报错，因为 name 是只读属性</span></span>
<span class="line">person<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span> <span class="token comment">// 报错，因为 age 是只读属性</span></span>
<span class="line">person <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;Carol&quot;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">50</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 可以修改整体属性值</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的示例中，我们先声明了一个 Person 接口，然后使用 Readonly 操作符将其转化为只读类型 ReadonlyPerson，接着创建一个只读类型的变量 person，并赋初值为 { name: &quot;Alice&quot;, age: 30 }。由于 ReadonlyPerson 中的每个属性都是只读属性，所以我们不能修改 person 中的任何属性。如果要修改整个数据对象，我们需要分配一个新对象来覆盖 person。</p>`,6),o=[t];function l(c,i){return a(),s("div",null,o)}const u=n(p,[["render",l],["__file","手写ReadOnly.html.vue"]]),d=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/TS%E7%AF%87/%E6%89%8B%E5%86%99%E7%AF%87/%E6%89%8B%E5%86%99ReadOnly.html","title":"手写ReadOnly","lang":"zh-CN","frontmatter":{},"headers":[],"git":{"updatedTime":1724247277000,"contributors":[{"name":"前端架构师","email":"62106726+qdleader@users.noreply.github.com","commits":1}]},"filePathRelative":"前端面试/TS篇/手写篇/手写ReadOnly.md"}');export{u as comp,d as data};
