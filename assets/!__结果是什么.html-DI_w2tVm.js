import{_ as s,c as n,o as a,a as e}from"./app-90N25QkG.js";const p={},t=e(`<h1 id="结果是什么" tabindex="-1"><a class="header-anchor" href="#结果是什么"><span>[] == ![]结果是什么？</span></a></h1><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">== 中，左右两边都需要转换为数字然后进行比较。 []转换为数字为0。 ![] 首先是转换为布尔值，由于[]作为一个引用类型转换为布尔值为true, 因此![]为false，进而在转换成数字，变为0。 0 == 0 ， 结果为true</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>简述过程</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&#39;&#39;</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>详细点</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">!</span><span class="token boolean">true</span> <span class="token comment">// 将空数组这个对象类型转换成布尔值</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token comment">// ! 运算符对 true 进行取反</span></span>
<span class="line"></span>
<span class="line"><span class="token string">&#39;&#39;</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token comment">// 对 [] 进行 ToPrimitive 操作，返回一个空对象 </span></span>
<span class="line"></span>
<span class="line"><span class="token number">0</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token comment">// 将等号两边都转换成数字类型</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token function">ToPrimitive</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> Number<span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">&gt;</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">如果 obj 是基本类型，直接返回</span>
<span class="line">否则，调用 valueOf 方法，如果得到原始值，则返回</span>
<span class="line">否则，调用 toString 方法，如果得到原始值，则返回</span>
<span class="line">否则，报错</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="拓展" tabindex="-1"><a class="header-anchor" href="#拓展"><span>拓展</span></a></h2><p>[] == ![] [] == [] 如果类型是对象，二者引用同一个对象，返回 true，反之返回 false。 [] == false [] == 0 [] == &#39;&#39; [] == &#39;0&#39; {} == &#39;0&#39;</p>`,8),o=[t];function l(c,i){return a(),n("div",null,o)}const u=s(p,[["render",l],["__file","!__结果是什么.html.vue"]]),d=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/js%E7%B1%BB/%E5%8F%98%E9%87%8F%E7%B1%BB/!__%E7%BB%93%E6%9E%9C%E6%98%AF%E4%BB%80%E4%B9%88.html","title":"[] == ![]结果是什么？","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"拓展","slug":"拓展","link":"#拓展","children":[]}],"git":{"updatedTime":1724247277000,"contributors":[{"name":"前端架构师","email":"62106726+qdleader@users.noreply.github.com","commits":1}]},"filePathRelative":"前端面试/js类/变量类/[]==![]结果是什么.md"}');export{u as comp,d as data};
