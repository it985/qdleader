import{_ as e,c as a,o as c,a as p}from"./app-90N25QkG.js";const t={},r=p('<h1 id="webpack的打包原理" tabindex="-1"><a class="header-anchor" href="#webpack的打包原理"><span>webpack的打包原理</span></a></h1><h2 id="webpack构建流程-原理" tabindex="-1"><a class="header-anchor" href="#webpack构建流程-原理"><span>webpack构建流程（原理）</span></a></h2><p>从启动构建到输出结果一系列过程：</p><p>（1）初始化参数：解析webpack配置参数，合并shell传入和webpack.config.js文件配置的参数，形成最后的配置结果。</p><p>（2）开始编译：上一步得到的参数初始化compiler对象，注册所有配置的插件，插件监听webpack构建生命周期的事件节点，做出相应的反应，执行对象的 run 方法开始执行编译。</p><p>（3）确定入口：从配置的entry入口(fs读取文件内容)，开始解析文件构建AST语法树（ @babel/parser 转AST树），找出依赖，递归下去。</p><p>（4）编译模块：递归中根据文件类型和loader配置，调用所有配置的loader对文件进行转换，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理。</p><p>（5）完成模块编译并输出：递归完事后，得到每个文件结果，包含每个模块以及他们之间的依赖关系，根据entry配置生成代码块chunk。</p><p>（6）输出完成：输出所有的chunk到文件系统。</p>',9),n=[r];function s(l,o){return c(),a("div",null,n)}const b=e(t,[["render",s],["__file","webpack的打包原理.html.vue"]]),h=JSON.parse('{"path":"/webpack/webpack%E7%9A%84%E6%89%93%E5%8C%85%E5%8E%9F%E7%90%86.html","title":"webpack的打包原理","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"webpack构建流程（原理）","slug":"webpack构建流程-原理","link":"#webpack构建流程-原理","children":[]}],"git":{"updatedTime":1724247277000,"contributors":[{"name":"前端架构师","email":"62106726+qdleader@users.noreply.github.com","commits":1}]},"filePathRelative":"webpack/webpack的打包原理.md"}');export{b as comp,h as data};
