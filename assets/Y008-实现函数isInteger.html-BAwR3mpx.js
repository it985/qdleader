import{_ as n,c as s,o as a,a as e}from"./app-90N25QkG.js";const t={},p=e(`<h1 id="y008-实现函数isinteger" tabindex="-1"><a class="header-anchor" href="#y008-实现函数isinteger"><span>Y008-实现函数isInteger</span></a></h1><h2 id="实现函数-isinteger-x-来判断-x-是否是整数" tabindex="-1"><a class="header-anchor" href="#实现函数-isinteger-x-来判断-x-是否是整数"><span>实现函数 isInteger(x) 来判断 x 是否是整数</span></a></h2><p>可以将 x 转换成10进制，判断和本身是不是相等即可：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> </span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">===</span> x<span class="token punctuation">;</span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ES6 对数值进行了扩展，提供了静态方法 isInteger() 来判断参数是否是整数：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">  Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token comment">// true</span></span>
<span class="line">  Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">25.0</span><span class="token punctuation">)</span> <span class="token comment">// true</span></span>
<span class="line">  Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">25.1</span><span class="token punctuation">)</span> <span class="token comment">// false</span></span>
<span class="line">  Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token string">&quot;15&quot;</span><span class="token punctuation">)</span> <span class="token comment">// false</span></span>
<span class="line">  Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JavaScript能够准确表示的整数范围在 -2^53 到 2^53 之间（不含两个端点），超过这个范围，无法精确表示这个值。ES6 引入了Number.MAX_SAFE_INTEGER 和 Number.MIN_SAFE_INTEGER这两个常量，用来表示这个范围的上下限，并提供了 Number.isSafeInteger() 来判断整数是否是安全型整数。</p>`,7),i=[p];function c(l,o){return a(),s("div",null,i)}const u=n(t,[["render",c],["__file","Y008-实现函数isInteger.html.vue"]]),d=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/js%E7%B1%BB/%E8%BF%90%E7%AE%97%E7%B1%BB/Y008-%E5%AE%9E%E7%8E%B0%E5%87%BD%E6%95%B0isInteger.html","title":"Y008-实现函数isInteger","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"实现函数 isInteger(x) 来判断 x 是否是整数","slug":"实现函数-isinteger-x-来判断-x-是否是整数","link":"#实现函数-isinteger-x-来判断-x-是否是整数","children":[]}],"git":{"updatedTime":1724247277000,"contributors":[{"name":"前端架构师","email":"62106726+qdleader@users.noreply.github.com","commits":1}]},"filePathRelative":"前端面试/js类/运算类/Y008-实现函数isInteger.md"}');export{u as comp,d as data};
