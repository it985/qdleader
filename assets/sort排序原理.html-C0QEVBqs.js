import{_ as n,c as s,o as a,a as t}from"./app-90N25QkG.js";const e={},p=t(`<h1 id="sort排序原理" tabindex="-1"><a class="header-anchor" href="#sort排序原理"><span>sort排序原理</span></a></h1><p>有没有想过javascript中数组的排序方法Array.prototype.sort()内部是使用什么排序算法实现的呢？</p><p>sort() 关于sort方法的使用就不多说了，很简单：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">sort方法可以直接调用，不传入任何参数，也可以传入一个比较函数作为参数</span>
<span class="line"></span>
<span class="line"><span class="token function">当不传入参数时，sort方法会调用默认的排序函数，即先调用每个数组元素的toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>转型方法，然后按照字符串的Unicode编码顺序来对字符串进行排序。</span>
<span class="line"></span>
<span class="line">关于比较函数，函数接受两个参数，若函数返回值大于<span class="token number">0</span>，则执行交换，否则不交换</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例代码：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token parameter">val1<span class="token punctuation">,</span> val2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> val1 <span class="token operator">-</span> val2<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span>arr<span class="token punctuation">)</span></span>
<span class="line">arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> a <span class="token operator">-</span> b</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">,</span>arr<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sort内部的排序算法" tabindex="-1"><a class="header-anchor" href="#sort内部的排序算法"><span>sort内部的排序算法</span></a></h2><p>看源码可知，sort内部是快排的实现，但是在数据长度较小时会使用插排，即如果数组长度小于等于22（v8代码逻辑中是10）的时候使用插入排序，大于这个值使用快速排序， 但是在快速排序递归调用过程中，分治的数组长度小于等于22也会使用插入排序。</p><p>function InnerArraySort(array, length, comparefn) { // In-place QuickSort algorithm. // For short (length &lt;= 22) arrays, insertion sort is used for efficiency. chromium v8引擎array.js</p>`,9),l=[p];function c(o,i){return a(),s("div",null,l)}const u=n(e,[["render",c],["__file","sort排序原理.html.vue"]]),d=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/js%E7%B1%BB/%E5%85%B6%E4%BB%96%E7%B1%BB/sort%E6%8E%92%E5%BA%8F%E5%8E%9F%E7%90%86.html","title":"sort排序原理","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"sort内部的排序算法","slug":"sort内部的排序算法","link":"#sort内部的排序算法","children":[]}],"git":{"updatedTime":1724247277000,"contributors":[{"name":"前端架构师","email":"62106726+qdleader@users.noreply.github.com","commits":1}]},"filePathRelative":"前端面试/js类/其他类/sort排序原理.md"}');export{u as comp,d as data};
