import{_ as s,c as n,o as a,a as e}from"./app-90N25QkG.js";const p={},t=e(`<h1 id="两个-script-第一个报错-第二个是否会继续解析★" tabindex="-1"><a class="header-anchor" href="#两个-script-第一个报错-第二个是否会继续解析★"><span>两个 script ,第一个报错,第二个是否会继续解析★</span></a></h1><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>
<span class="line"> </span>
<span class="line"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在运行的时候 我们发现1是会正常输出的，再看下一段代码：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们发现这个时候输出的a并不是undefined，而是保存：a is not defined，因为下面那个script还没执行到。</p><p>因为我们知道浏览器遇到script脚本 会停止dom解析和css解析，专注于解析js，所以这个时候浏览器不会做其他任何事情， 现在浏览器解析到第一个script标签，他开始解析这段代码，如果这段代码报错了，则浏览器抛出错误，并认为该段script解析完毕， 然后浏览器则继续开始查找dom元素 解析dom元素，这个时候浏览器又遇到第二段script块，然后继续开始解析，所以 第一段script的报错 并不会影响第二段script的执行。</p><p>浏览器在解析文档的时候，并没有提前将页面上的所有的script标签，提前收集起来 做统一处理，而是根据遇到则解析的 规则来解析， 所以我们看到 即使js存在命名提升，因为在解析第一段script的时候，第二段script还没有执行，所以也就不存在命名提升</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>
<span class="line"> </span>
<span class="line"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个时候输出1，这表明 多个script块 是共享同一个作用域的，也就是window顶级作用域。</p>`,9),l=[t];function i(c,o){return a(),n("div",null,l)}const d=s(p,[["render",i],["__file","两个 script _第一个报错_第二个是否会继续解析★.html.vue"]]),u=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/js%E7%B1%BB/%E5%85%B6%E4%BB%96%E7%B1%BB/%E4%B8%A4%E4%B8%AA%20script%20_%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%8A%A5%E9%94%99_%E7%AC%AC%E4%BA%8C%E4%B8%AA%E6%98%AF%E5%90%A6%E4%BC%9A%E7%BB%A7%E7%BB%AD%E8%A7%A3%E6%9E%90%E2%98%85.html","title":"两个 script ,第一个报错,第二个是否会继续解析★","lang":"zh-CN","frontmatter":{},"headers":[],"git":{"updatedTime":1724247277000,"contributors":[{"name":"前端架构师","email":"62106726+qdleader@users.noreply.github.com","commits":1}]},"filePathRelative":"前端面试/js类/其他类/两个 script ,第一个报错,第二个是否会继续解析★.md"}');export{d as comp,u as data};
